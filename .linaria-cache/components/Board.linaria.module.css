.b2npyrg{display:grid;grid-template-rows:30% 30% 30%;grid-template-columns:30% 30% 30%;width:80%;height:80%;}
/*# sourceMappingURL=data:application/json;base64,*/