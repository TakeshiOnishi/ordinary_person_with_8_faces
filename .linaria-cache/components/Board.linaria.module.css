.f2npyrg{position:relative;}
.f1wykc7f{position:absolute;width:100%;height:100%;object-fit:cover;}
.f5pows{position:absolute;width:100%;height:100%;object-fit:cover;}
.b11o8r99{display:grid;grid-template-rows:30% 30% 30%;grid-template-columns:30% 30% 30%;width:80%;height:80%;}
/*# sourceMappingURL=data:application/json;base64,*/