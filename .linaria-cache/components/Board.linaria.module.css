.f2npyrg{position:relative;}
.f1wykc7f{position:absolute;width:100%;height:100%;object-fit:cover;}
.f5pows{position:absolute;width:100%;height:100%;object-fit:cover;}
.b11o8r99{display:grid;grid-template-rows:33% 33% 33%;grid-template-columns:33% 33% 33%;width:100vw;height:100vh;}
/*# sourceMappingURL=data:application/json;base64,*/